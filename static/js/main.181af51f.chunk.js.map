{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["marked","setOptions","breaks","renderer","Renderer","link","href","title","text","concat","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","markdown","placeholder","editorMaximized","previewMaximized","handleChange","bind","assertThisInitialized","handleEditorMaximize","handlePreviewMaximize","e","setState","target","value","classes","react_default","a","createElement","className","App_Toolbar","icon","onClick","App_Editor","onChange","App_Preview","React","Component","Toolbar","Editor","id","type","Preview","dangerouslySetInnerHTML","__html","logo","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","alert","onUpdate","onSuccess","catch","error","console","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.181af51f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport logo from './logo.svg';\nimport marked from 'marked';\n\n// 'marked' config\n// line breaks\nmarked.setOptions({\n  breaks: true,\n});\n\n// target=\"_blank\"\nconst renderer = new marked.Renderer();\nrenderer.link = function (href, title, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text} </a>`;\n};\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state =  {\n      markdown: placeholder,\n      editorMaximized: false,\n      previewMaximized: false\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleEditorMaximize = this.handleEditorMaximize.bind(this);\n    this.handlePreviewMaximize = this.handlePreviewMaximize.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      markdown: e.target.value\n    });\n  }\n  handleEditorMaximize() {\n    this.setState({\n      editorMaximized: !this.state.editorMaximized\n    });\n  }\n  handlePreviewMaximize() {\n    this.setState({\n      previewMaximized: !this.state.previewMaximized\n    });\n  }\n  render() {\n    const classes = this.state.editorMaximized ? \n          ['editorWrap half', \n           'previewWrap hide', \n           'far fa-minus-square'] : \n          this.state.previewMaximized ?\n          ['editorWrap hide', \n           'previewWrap half', \n           'far fa-minus-square'] :\n          ['editorWrap half', \n           'previewWrap half', \n           'far fa-window-maximize'];\n    return (\n      <div className=\"container\">\n        <div className={classes[0]}>\n          <Toolbar \n            icon={classes[2]} \n            onClick={this.handleEditorMaximize}\n            text=\"Editor\"/>\n          <Editor markdown={this.state.markdown} \n            onChange={this.handleChange} />\n        </div>\n        <div className={classes[1]}>\n          <Toolbar\n            icon={classes[2]} \n            onClick={this.handlePreviewMaximize}\n            text=\"Previewer\"/>\n          <Preview  markdown={this.state.markdown}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst Toolbar = (props) => {\n    return (\n      <div className=\"toolbar\">\n        {props.text}\n        <i onClick={props.onClick} className={props.icon}></i>\n      </div>\n   )\n}\n\nconst Editor = (props) => {\n  return (\n    <textarea id=\"editor\"\n      value={props.markdown}\n      onChange={props.onChange}\n      type=\"text\"/>\n    )\n}\n\nconst Preview = (props) => {\n  return (\n      <div id='preview' dangerouslySetInnerHTML={{__html: marked(props.markdown, { renderer: renderer })}} />\n    )\n}\n\nconst placeholder = \n`# This page lets you convert Markdown into HTML\n\n## How to use\n1. Type in 'Editor'\n1. See results in 'Previewer'\n\n## Some examples:\n### - code\n\\`<div> _____ </div>\\`, between 2 backticks.\n\n#### multi-line code\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\n### - text\nmake text **bold**,\n_italic_.\n**_both_**,\nor ~~crossed out~~.\n\n### - links\nCheck out [Markdown Doc](https://help.github.com/en/articles/basic-writing-and-formatting-syntax)\n\n### - block quotes\n> Block Quote\n\n### - tables\n\nOne | Two | Three\n------------ | ------------- | ------------- \ncontent can | be here | and here\nand here | here | 0\n\n### - lists\n#### unordered\n- There are lists.\n  - Some are bulleted\n     - With different indentation levels\n        - That look like this.\n\n#### ordered\n1. Numbererd lists too.\n1. Numbers doesn't matter \n1. The list goes on\n- You can use dashes\n* or asterisks\n\n### - images\n![React logo](${logo} \"React logo\")\n`\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          alert(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              alert(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              alert('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      alert(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}